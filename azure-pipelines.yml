strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macOS-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

pr:
- master

trigger:
- master

variables: 
    BuildConfiguration: 'Release'

steps:
- task: CredScan@2
  displayName: CredScan
  inputs:
    toolMajorVersion: 'V2'

- task: PoliCheck@1
  displayName: PoliCheck
  inputs:
    inputType: 'Basic'
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'
    result: 'PoliCheck.xml'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:Build /p:Configuration=$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:Test /p:Configuration=$(buildConfiguration)'

- task: CopyFiles@2
  displayName: 'Copy artifacts directory to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: 'artifacts\**'
    TargetFolder: '$(build.artifactstagingdirectory)\artifacts'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: BinSkim@3
  displayName: BinSkim
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    AnalyzeTarget: '$(Build.ArtifactStagingDirectory)\*.dll;$(Build.ArtifactStagingDirectory)\*.exe'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
